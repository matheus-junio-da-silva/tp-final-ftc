/**
 * Moore functions - JavaScript equivalent of moore.py
 * Handles Moore machine functionality with sequential potion creation
 */

// Realiza√ß√£o din√¢mica de uma m√°quina de Moore
class Moore {
    constructor() {
        this.estados = {};
        this.estadoAtual = 'S0'; // Estado inicial
        this.sequencia = [
            'biz', 'bab', 'nho', 'pip', 'pum',
            'bur', 'pix', 'zap', 'sos', 'lol',
            'p', 'a', 'o', 'omg'
        ];
        this.ingredienteEsperado = 'biz';
        this.ingredientesUsados = [];
        this.historico = [];
        this.progresso = 0;
        this.definirEstados();
        this.definirAlfabeto();
    }

    async run(sigma) {
        this.primeiro = true;
        this.progresso = 0;
        this.ingredientesUsados = [];
        this.historico = [];
        this.estadoAtual = 'S0'; // Reiniciar para estado inicial
        this.ingredienteEsperado = this.sequencia[0];
        
        this.adicionarHistorico("üîÆ Iniciando sequ√™ncia m√°gica com a M√°quina de Moore...", 'info');
        this.adicionarHistorico("‚öóÔ∏è O caldeir√£o est√° pronto para a sequ√™ncia espec√≠fica!", 'info');
        this.adicionarHistorico(`üìç Estado inicial: ${this.estadoAtual}`, 'info');
        this.adicionarHistorico(`üéØ Primeiro ingrediente esperado: ${this.ingredienteEsperado}`, 'info');
    }

    adicionarIngrediente(ingrediente, sigma) {
        if (!sigma.validaIngrediente(ingrediente)) {
            this.adicionarHistorico(`‚ùå Ingrediente "${ingrediente}" n√£o reconhecido!`, 'error');
            return false;
        }

        const estadoAnterior = this.estadoAtual;
        const progressoAnterior = this.progresso;

        // Verificar se √© o ingrediente esperado na sequ√™ncia
        if (ingrediente === this.ingredienteEsperado) {
            this.progresso++;
            this.ingredientesUsados.push(ingrediente);
            
            // Transi√ß√£o de estado
            this.estadoAtual = `S${this.progresso}`;
            
            // Determinar pr√≥ximo ingrediente esperado
            if (this.progresso < this.sequencia.length) {
                this.ingredienteEsperado = this.sequencia[this.progresso];
            } else {
                this.ingredienteEsperado = 'COMPLETA';
            }

            // Sa√≠da do estado (caracter√≠stica da M√°quina de Moore)
            const saida = this.obterSaidaEstado(this.estadoAtual);

            this.adicionarHistorico(
                `‚úÖ ${this.progresso}. Ingrediente "${ingrediente}" adicionado corretamente!`, 
                'success'
            );
            this.adicionarHistorico(`   üîÑ Transi√ß√£o: ${estadoAnterior} ‚Üí ${this.estadoAtual}`, 'info');
            this.adicionarHistorico(`   üé≠ Sa√≠da do estado: ${saida}`, 'success');
            
            if (this.progresso < this.sequencia.length) {
                this.adicionarHistorico(`   üéØ Pr√≥ximo ingrediente esperado: ${this.ingredienteEsperado}`, 'info');
            } else {
                this.adicionarHistorico(`   üèÅ Sequ√™ncia completa! Estado final atingido.`, 'success');
            }

        } else {
            // Ingrediente incorreto - resetar para estado inicial
            this.estadoAtual = 'S0';
            this.progresso = 0;
            this.ingredienteEsperado = this.sequencia[0];
            
            this.adicionarHistorico(
                `üí• ERRO! Ingrediente "${ingrediente}" incorreto! Esperava "${this.sequencia[progressoAnterior]}"`, 
                'error'
            );
            this.adicionarHistorico(`   üîÑ Resetando para estado inicial: ${this.estadoAtual}`, 'warning');
            this.adicionarHistorico(`   üéØ Ingrediente esperado agora: ${this.ingredienteEsperado}`, 'info');
        }

        return true;
    }

    obterSaidaEstado(estado) {
        const saidas = {
            'S0': '‚öóÔ∏è Caldeir√£o vazio - Aguardando primeiro ingrediente',
            'S1': 'üå´Ô∏è Fuma√ßa verde emerge do caldeir√£o...',
            'S2': 'üí´ Brilho fraco pulsante aparece',
            'S3': 'üåÄ Bolhas azuis come√ßam a flutuar',
            'S4': 'üî• Chamas suaves dan√ßam na superf√≠cie',
            'S5': 'üí® Vapor roxo forma espirais m√≠sticas',
            'S6': 'üåà Arco-√≠ris et√©reo cruza o caldeir√£o',
            'S7': '‚ö° Fa√≠scas douradas saltam das bordas',
            'S8': 'üå°Ô∏è Caldeir√£o fumegante com aroma doce',
            'S9': 'üìñ P√°ginas invis√≠veis viram sozinhas no ar',
            'S10': 'ü•ö Forma ov√≥ide pulsante se materializa',
            'S11': 'üåπ P√©talas m√°gicas flutuam graciosamente',
            'S12': 'üíß √Ågua cristalina brilha intensamente',
            'S13': 'üò¢ Uma l√°grima cintilante se forma',
            'S14': '‚ú® PO√á√ÉO M√ÅGICA COMPLETADA! Luz dourada irradia!'
        };
        return saidas[estado] || '‚ùì Estado desconhecido';
    }

    avaliarSequencia() {
        this.adicionarHistorico("\n" + "=".repeat(50), 'info');
        this.adicionarHistorico("üîç Avaliando sequ√™ncia da M√°quina de Moore...", 'info');

        if (this.progresso === this.sequencia.length) {
            this.adicionarHistorico("üèÜ SEQU√äNCIA PERFEITA! Todos os ingredientes foram adicionados na ordem correta!", 'success');
            this.adicionarHistorico("‚ú® A po√ß√£o m√°gica foi criada com sucesso seguindo a m√°quina de Moore!", 'success');
            return "Po√ß√£o M√°gica Completa";
        } else {
            this.adicionarHistorico(`‚ö†Ô∏è Sequ√™ncia incompleta. Progresso: ${this.progresso}/${this.sequencia.length}`, 'warning');
            this.adicionarHistorico(`üéØ Pr√≥ximo ingrediente necess√°rio: ${this.ingredienteEsperado}`, 'info');
            return `Sequ√™ncia Incompleta (${this.progresso}/${this.sequencia.length})`;
        }
    }

    // M√©todos auxiliares similares aos da Mealy
    definirEstados() {
        // Estados da m√°quina de Moore (S0 a S14)
        for (let i = 0; i <= 14; i++) {
            this.estados[`S${i}`] = {
                id: `S${i}`,
                saida: this.obterSaidaEstado(`S${i}`),
                transicoes: {}
            };
        }
    }

    definirAlfabeto() {
        this.alfabeto = [
            'biz', 'bab', 'nho', 'pip', 'pum',
            'bur', 'pix', 'zap', 'sos', 'lol',
            'p', 'a', 'o', 'omg'
        ];
    }

    getEstados() {
        return this.estados;
    }

    getSequencia() {
        return this.sequencia;
    }

    getReceitas() {
        return [
            "üîÆ Sequ√™ncia Completa da M√°quina de Moore:",
            "1. biz (biscoito de bruxa) - In√≠cio da magia",
            "2. bab (baba de camelo) - Viscosidade m√≠stica", 
            "3. nho (nhonho de gato) - Suavidade felina",
            "4. pip (pipoca m√°gica) - Explos√£o de sabor",
            "5. pum (pum de drag√£o) - Poder drac√¥nico",
            "6. bur (buraco negro) - Densidade infinita",
            "7. pix (pixie dust) - Magia das fadas",
            "8. zap (energia el√©trica) - Vitalidade pura",
            "9. sos (sossega le√£o) - Tranquilidade",
            "10. lol (riso m√°gico) - Alegria eterna",
            "11. p (p√©talas) - Beleza natural",
            "12. a (√°gua pura) - Ess√™ncia da vida", 
            "13. o (√≥leo sagrado) - Un√ß√£o m√≠stica",
            "14. omg (concentrado divino) - Finaliza√ß√£o √©pica"
        ];
    }

    criarTabelaMaquina() {
        let tabela = `
            <div class="machine-table">
                <h4>üìä Estrutura da M√°quina de Moore</h4>
                <p><strong>Tipo:</strong> M√°quina de Moore (sa√≠da depende apenas do estado)</p>
                <p><strong>Estados:</strong> S0, S1, S2, ..., S14 (15 estados)</p>
                <p><strong>Estado Inicial:</strong> S0</p>
                <p><strong>Estado Final:</strong> S14</p>
                <p><strong>Alfabeto:</strong> {${this.alfabeto.join(', ')}}</p>
                
                <h5>üîÑ Fun√ß√£o de Transi√ß√£o:</h5>
                <div class="transition-info">
                    <p>Œ¥(Si, ingrediente) = Si+1 se ingrediente = sequencia[i]</p>
                    <p>Œ¥(Si, ingrediente) = S0 se ingrediente ‚â† sequencia[i]</p>
                </div>
                
                <h5>üì§ Fun√ß√£o de Sa√≠da (caracter√≠stica de Moore):</h5>
                <div class="output-info">
                    <p>Œª(Si) = sa√≠da espec√≠fica do estado Si</p>
                    <p>A sa√≠da depende apenas do estado atual, n√£o da entrada</p>
                </div>
            </div>
        `;
        return tabela;
    }

    adicionarHistorico(mensagem, tipo = 'info') {
        if (!this.historico) {
            this.historico = [];
        }
        this.historico.push({
            mensagem,
            tipo,
            timestamp: new Date().toLocaleTimeString()
        });
    }

    obterHistorico() {
        return this.historico || [];
    }

    reiniciar() {
        this.primeiro = true;
        this.progresso = 0;
        this.ingredientesUsados = [];
        this.historico = [];
        this.estadoAtual = 'S0';
        this.ingredienteEsperado = this.sequencia[0];
    }

    obterEstado() {
        return {
            estado: this.estadoAtual,
            progresso: this.progresso,
            total: this.sequencia.length,
            ingredienteEsperado: this.ingredienteEsperado,
            ingredientesUsados: this.ingredientesUsados.length,
            sequenciaCompleta: this.progresso === this.sequencia.length
        };
    }
}
